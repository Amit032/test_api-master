{"ast":null,"code":"import _objectSpread from \"/home/roxiler/Desktop/formik_demo/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/roxiler/Desktop/formik_demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/roxiler/Desktop/formik_demo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport decode from 'jwt-decode';\n\nvar AuthService =\n/*#__PURE__*/\nfunction () {\n  function AuthService(domain) {\n    _classCallCheck(this, AuthService);\n\n    this.domain = domain || \"https://blooming-cove-35281.herokuapp.com\";\n    this.fetch = this.fetch.bind(this);\n    this.login = this.login.bind(this);\n  }\n\n  _createClass(AuthService, [{\n    key: \"login\",\n    value: function login(grant_type, email, password) {\n      var _this = this;\n\n      return this.fetch(\"https://blooming-cove-35281.herokuapp.com/api/oauth/token\", {\n        method: 'POST',\n        body: JSON.stringify({\n          grant_type: grant_type,\n          email: email,\n          password: password\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (res) {\n        _this.setToken(res.access_token);\n\n        return Promise.resolve(res);\n      });\n    }\n  }, {\n    key: \"fetch\",\n    value: function (_fetch) {\n      function fetch(_x, _x2) {\n        return _fetch.apply(this, arguments);\n      }\n\n      fetch.toString = function () {\n        return _fetch.toString();\n      };\n\n      return fetch;\n    }(function (url, options) {\n      var header = {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      };\n      if (this.loggedIn()) header['Authorization'] = \"Bearer \".concat(this.getToken());\n      return fetch(url, _objectSpread({\n        header: header\n      }, options)).then(this._checkStatus).then(function (response) {\n        return response.json();\n      });\n    })\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      return localStorage.getItem('id_token');\n    }\n  }, {\n    key: \"setToken\",\n    value: function setToken(idToken) {\n      return localStorage.setItem('id_token', idToken);\n    }\n  }, {\n    key: \"loggedIn\",\n    value: function loggedIn() {\n      var token = this.getToken();\n      return !!token && !this.isTokenExpired(token);\n    }\n  }, {\n    key: \"isTokenExpired\",\n    value: function isTokenExpired(token) {\n      try {\n        var decoded = decode(token);\n\n        if (decoded.exp < Date.now() / 1000) {\n          return true;\n        } else {\n          return false;\n        }\n      } catch (e) {\n        return false;\n      }\n    }\n  }]);\n\n  return AuthService;\n}();\n\nexport { AuthService as default };","map":{"version":3,"sources":["/home/roxiler/Desktop/formik_demo/src/services/AuthService.js"],"names":["decode","AuthService","domain","fetch","bind","login","grant_type","email","password","method","body","JSON","stringify","then","res","json","setToken","access_token","Promise","resolve","url","options","header","loggedIn","getToken","_checkStatus","response","localStorage","getItem","idToken","setItem","token","isTokenExpired","decoded","exp","Date","now","e"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,YAAnB;;IAEqBC,W;;;AACjB,uBAAYC,MAAZ,EAAmB;AAAA;;AACf,SAAKA,MAAL,GAAcA,MAAM,+CAApB;AACA,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWD,IAAX,CAAgB,IAAhB,CAAb;AACH;;;;0BACKE,U,EAAWC,K,EAAOC,Q,EAAS;AAAA;;AAC7B,aAAO,KAAKL,KAAL,8DAAuE;AAC1EM,QAAAA,MAAM,EAAC,MADmE;AAE1EC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBN,UAAAA,UAAU,EAAVA,UADiB;AAEjBC,UAAAA,KAAK,EAALA,KAFiB;AAGjBC,UAAAA,QAAQ,EAARA;AAHiB,SAAf;AAFoE,OAAvE,EAOJK,IAPI,CAOC,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,OAPJ,EAQJF,IARI,CAQC,UAAAC,GAAG,EAAI;AACX,QAAA,KAAI,CAACE,QAAL,CAAcF,GAAG,CAACG,YAAlB;;AACA,eAAOC,OAAO,CAACC,OAAR,CAAgBL,GAAhB,CAAP;AACH,OAXM,CAAP;AAYH;;;;;;;;;;;;;gBAEKM,G,EAAKC,O,EAAQ;AACf,UAAMC,MAAM,GAAG;AACX,kBAAS,kBADE;AAEX,wBAAe;AAFJ,OAAf;AAIA,UAAG,KAAKC,QAAL,EAAH,EACID,MAAM,CAAC,eAAD,CAAN,oBAAoC,KAAKE,QAAL,EAApC;AAEA,aAAOrB,KAAK,CAACiB,GAAD;AACRE,QAAAA,MAAM,EAANA;AADQ,SAELD,OAFK,EAAL,CAINR,IAJM,CAID,KAAKY,YAJJ,EAKNZ,IALM,CAKD,UAAAa,QAAQ;AAAA,eAAIA,QAAQ,CAACX,IAAT,EAAJ;AAAA,OALP,CAAP;AAMP,K;;;+BAGS;AACN,aAAOY,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAP;AACH;;;6BACQC,O,EAAQ;AACb,aAAOF,YAAY,CAACG,OAAb,CAAqB,UAArB,EAAgCD,OAAhC,CAAP;AACH;;;+BACS;AACN,UAAME,KAAK,GAAG,KAAKP,QAAL,EAAd;AACA,aAAO,CAAC,CAACO,KAAF,IAAW,CAAC,KAAKC,cAAL,CAAoBD,KAApB,CAAnB;AACH;;;mCACcA,K,EAAM;AACjB,UAAG;AACC,YAAME,OAAO,GAAGjC,MAAM,CAAC+B,KAAD,CAAtB;;AACA,YAAGE,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA9B,EAAmC;AAC/B,iBAAO,IAAP;AACH,SAFD,MAGI;AACA,iBAAO,KAAP;AACH;AACJ,OARD,CASA,OAAMC,CAAN,EAAQ;AACJ,eAAO,KAAP;AACH;AACJ;;;;;;SA7DgBpC,W","sourcesContent":["import decode from 'jwt-decode'\n\nexport default class AuthService{\n    constructor(domain){\n        this.domain = domain || `https://blooming-cove-35281.herokuapp.com`;\n        this.fetch = this.fetch.bind(this)\n        this.login = this.login.bind(this)\n    }\n    login(grant_type,email, password){\n        return this.fetch(`https://blooming-cove-35281.herokuapp.com/api/oauth/token`,{\n            method:'POST',\n            body: JSON.stringify({\n                grant_type,\n                email,\n                password\n            })\n        }).then(res => res.json())\n          .then(res => {\n            this.setToken(res.access_token);\n            return Promise.resolve(res);\n        })\n    }\n\n    fetch(url, options){\n        const header = {\n            'Accept':'application/json',\n            'Content-Type':'application/json'\n        }\n        if(this.loggedIn())\n            header['Authorization'] = `Bearer ${this.getToken()}`\n\n            return fetch(url, {\n                header,\n                ...options\n            })\n            .then(this._checkStatus)\n            .then(response => response.json())\n    }\n\n\n    getToken(){\n        return localStorage.getItem('id_token');\n    }\n    setToken(idToken){\n        return localStorage.setItem('id_token',idToken);\n    }\n    loggedIn(){\n        const token = this.getToken();\n        return !!token && !this.isTokenExpired(token)\n    }\n    isTokenExpired(token){\n        try{\n            const decoded = decode(token);\n            if(decoded.exp < Date.now() / 1000){\n                return true;\n            }\n            else{\n                return false;\n            }\n        }\n        catch(e){\n            return false;\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}