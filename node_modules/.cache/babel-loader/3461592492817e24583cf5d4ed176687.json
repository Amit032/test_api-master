{"ast":null,"code":"import _objectSpread from \"/home/roxiler/Desktop/formik_demo/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/roxiler/Desktop/formik_demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport decode from \"jwt-decode\";\n\nvar AuthHelperMethods = // Initializing important variables\nfunction AuthHelperMethods(domain) {\n  var _this = this;\n\n  _classCallCheck(this, AuthHelperMethods);\n\n  this.login = function (grant_type, email, password) {\n    // Get a token from api server using the fetch api\n    return _this.fetch(\"https://blooming-cove-35281.herokuapp.com/api/oauth/token\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        grant_type: grant_type,\n        email: email,\n        password: password\n      })\n    }).then(function (res) {\n      _this.setToken(res.data.access_token); // Setting the token in localStorage\n\n\n      return Promise.resolve(res);\n    });\n  };\n\n  this.loggedIn = function () {\n    // Checks if there is a saved token and it's still valid\n    var token = _this.getToken(); // Getting token from localstorage\n\n\n    return !!token && !_this.isTokenExpired(token); // handwaiving here\n  };\n\n  this.isTokenExpired = function (token) {\n    try {\n      var decoded = decode(token);\n\n      if (decoded.exp < Date.now() / 1000) {\n        // Checking if token is expired.\n        return true;\n      } else return false;\n    } catch (err) {\n      console.log(\"expired check failed! Line 42: AuthService.js\");\n      return false;\n    }\n  };\n\n  this.setToken = function (idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem(\"id_token\", idToken);\n  };\n\n  this.getToken = function () {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem(\"id_token\");\n  };\n\n  this.logout = function () {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem(\"id_token\");\n  };\n\n  this.getConfirm = function () {\n    // Using jwt-decode npm package to decode the token\n    var answer = decode(_this.getToken());\n    console.log(\"Recieved answer!\");\n    return answer;\n  };\n\n  this.fetch = function (url, options) {\n    // performs api calls sending the required authentication headers\n    var headers = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }; // Setting Authorization header\n    // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n\n    if (_this.loggedIn()) {\n      headers[\"Authorization\"] = \"Bearer \" + _this.getToken();\n    }\n\n    return fetch(url, _objectSpread({\n      headers: headers\n    }, options)).then(_this._checkStatus).then(function (response) {\n      return response.json();\n    });\n  };\n\n  this._checkStatus = function (response) {\n    // raises an error in case response status is not a success\n    if (response.status >= 200 && response.status < 300) {\n      // Success status lies between 200 to 300\n      return response;\n    } else {\n      var error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  };\n\n  //THIS LINE IS ONLY USED WHEN YOU'RE IN PRODUCTION MODE!\n  this.domain = domain || \"https://blooming-cove-35281.herokuapp.com\"; // API server domain\n};\n\nexport { AuthHelperMethods as default };","map":{"version":3,"sources":["/home/roxiler/Desktop/formik_demo/src/services/AuthService.js"],"names":["decode","AuthHelperMethods","domain","login","grant_type","email","password","fetch","method","body","JSON","stringify","then","res","setToken","data","access_token","Promise","resolve","loggedIn","token","getToken","isTokenExpired","decoded","exp","Date","now","err","console","log","idToken","localStorage","setItem","getItem","logout","removeItem","getConfirm","answer","url","options","headers","Accept","_checkStatus","response","json","status","error","Error","statusText"],"mappings":"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","sourcesContent":["import decode from \"jwt-decode\";\n\nexport default class AuthHelperMethods {\n  // Initializing important variables\n  constructor(domain) {\n    //THIS LINE IS ONLY USED WHEN YOU'RE IN PRODUCTION MODE!\n    this.domain = domain || \"https://blooming-cove-35281.herokuapp.com\"; // API server domain\n  }\n  login = (grant_type,email, password) => {\n    // Get a token from api server using the fetch api\n    return this.fetch(`https://blooming-cove-35281.herokuapp.com/api/oauth/token`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        grant_type,\n        email,\n        password\n      })\n    }).then(res => {\n      this.setToken(res.data.access_token); // Setting the token in localStorage\n      return Promise.resolve(res);\n    });\n  };\n\n  loggedIn = () => {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken(); // Getting token from localstorage\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  };\n\n  isTokenExpired = token => {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        // Checking if token is expired.\n        return true;\n      } else return false;\n    } catch (err) {\n      console.log(\"expired check failed! Line 42: AuthService.js\");\n      return false;\n    }\n  };\n\n  setToken = idToken => {\n    // Saves user token to localStorage\n    localStorage.setItem(\"id_token\", idToken);\n  };\n\n  getToken = () => {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem(\"id_token\");\n  };\n\n  logout = () => {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem(\"id_token\");\n  };\n\n  getConfirm = () => {\n    // Using jwt-decode npm package to decode the token\n    let answer = decode(this.getToken());\n    console.log(\"Recieved answer!\");\n    return answer;\n  };\n\n  fetch = (url, options) => {\n    // performs api calls sending the required authentication headers\n    const headers = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    };\n    // Setting Authorization header\n    // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n    if (this.loggedIn()) {\n      headers[\"Authorization\"] = \"Bearer \" + this.getToken();\n    }\n\n    return fetch(url, {\n      headers,\n      ...options\n    })\n      .then(this._checkStatus)\n      .then(response => response.json());\n  };\n\n  _checkStatus = response => {\n    // raises an error in case response status is not a success\n    if (response.status >= 200 && response.status < 300) {\n      // Success status lies between 200 to 300\n      return response;\n    } else {\n      var error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}