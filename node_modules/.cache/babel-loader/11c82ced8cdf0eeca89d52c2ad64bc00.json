{"ast":null,"code":"import _objectSpread from \"/home/roxiler/Desktop/My-Project/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/roxiler/Desktop/My-Project/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport decode from \"jwt-decode\";\n\nvar AuthHelperMethods = function AuthHelperMethods() {\n  var _this = this;\n\n  _classCallCheck(this, AuthHelperMethods);\n\n  this.login = function (grant_type, email, password) {\n    return _this.fetch(\"https://blooming-cove-35281.herokuapp.com/api/oauth/token\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        grant_type: grant_type,\n        email: email,\n        password: password\n      })\n    }).then(function (res) {\n      _this.setToken(res.access_token);\n\n      return Promise.resolve(res);\n    });\n  };\n\n  this.loggedIn = function () {\n    var token = _this.getToken();\n\n    return !!token && !_this.isTokenExpired(token);\n  };\n\n  this.isTokenExpired = function (token) {\n    try {\n      var decoded = decode(token);\n\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      console.log(\"expired check failed!\");\n      return false;\n    }\n  };\n\n  this.setToken = function (idToken) {\n    localStorage.setItem(\"id_token\", idToken);\n  };\n\n  this.getToken = function () {\n    return localStorage.getItem(\"id_token\");\n  };\n\n  this.getConfirm = function () {\n    var answer = decode(_this.getToken());\n    console.log(\"Token Decoded!\");\n    return answer;\n  };\n\n  this.fetch = function (url, options) {\n    var headers = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    };\n\n    if (_this.loggedIn()) {\n      headers[\"Authorization\"] = \"Bearer \" + _this.getToken();\n    }\n\n    return fetch(url, _objectSpread({\n      headers: headers\n    }, options)).then(_this._checkStatus).then(function (response) {\n      return response.json();\n    });\n  };\n\n  this._checkStatus = function (response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    } else {\n      var error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  };\n};\n\nexport { AuthHelperMethods as default };","map":{"version":3,"sources":["/home/roxiler/Desktop/My-Project/src/services/AuthService.js"],"names":["decode","AuthHelperMethods","login","grant_type","email","password","fetch","method","body","JSON","stringify","then","res","setToken","access_token","Promise","resolve","loggedIn","token","getToken","isTokenExpired","decoded","exp","Date","now","err","console","log","idToken","localStorage","setItem","getItem","getConfirm","answer","url","options","headers","Accept","_checkStatus","response","json","status","error","Error","statusText"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,YAAnB;;IAEqBC,iB;;;;;OAEnBC,K,GAAQ,UAACC,UAAD,EAAYC,KAAZ,EAAmBC,QAAnB,EAAgC;AACtC,WAAO,KAAI,CAACC,KAAL,8DAAwE;AAC7EC,MAAAA,MAAM,EAAE,MADqE;AAE7EC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBP,QAAAA,UAAU,EAAVA,UADmB;AAEnBC,QAAAA,KAAK,EAALA,KAFmB;AAGnBC,QAAAA,QAAQ,EAARA;AAHmB,OAAf;AAFuE,KAAxE,EAOJM,IAPI,CAOC,UAAAC,GAAG,EAAI;AACb,MAAA,KAAI,CAACC,QAAL,CAAcD,GAAG,CAACE,YAAlB;;AACA,aAAOC,OAAO,CAACC,OAAR,CAAgBJ,GAAhB,CAAP;AACD,KAVM,CAAP;AAWD,G;;OAEDK,Q,GAAW,YAAM;AACf,QAAMC,KAAK,GAAG,KAAI,CAACC,QAAL,EAAd;;AACA,WAAO,CAAC,CAACD,KAAF,IAAW,CAAC,KAAI,CAACE,cAAL,CAAoBF,KAApB,CAAnB;AACD,G;;OAEDE,c,GAAiB,UAAAF,KAAK,EAAI;AACxB,QAAI;AACF,UAAMG,OAAO,GAAGrB,MAAM,CAACkB,KAAD,CAAtB;;AACA,UAAIG,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EAAqC;AACnC,eAAO,IAAP;AACD,OAFD,MAEO,OAAO,KAAP;AACR,KALD,CAKE,OAAOC,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,aAAO,KAAP;AACD;AACF,G;;OAEDd,Q,GAAW,UAAAe,OAAO,EAAI;AACpBC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,OAAjC;AACD,G;;OAEDT,Q,GAAW,YAAM;AACf,WAAOU,YAAY,CAACE,OAAb,CAAqB,UAArB,CAAP;AACD,G;;OAGDC,U,GAAa,YAAM;AACjB,QAAIC,MAAM,GAAGjC,MAAM,CAAC,KAAI,CAACmB,QAAL,EAAD,CAAnB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,WAAOM,MAAP;AACD,G;;OAED3B,K,GAAQ,UAAC4B,GAAD,EAAMC,OAAN,EAAkB;AACxB,QAAMC,OAAO,GAAG;AACdC,MAAAA,MAAM,EAAE,kBADM;AAEd,sBAAgB;AAFF,KAAhB;;AAIA,QAAI,KAAI,CAACpB,QAAL,EAAJ,EAAqB;AACnBmB,MAAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,YAAY,KAAI,CAACjB,QAAL,EAAvC;AACD;;AAED,WAAOb,KAAK,CAAC4B,GAAD;AACVE,MAAAA,OAAO,EAAPA;AADU,OAEPD,OAFO,EAAL,CAIJxB,IAJI,CAIC,KAAI,CAAC2B,YAJN,EAKJ3B,IALI,CAKC,UAAA4B,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KALT,CAAP;AAMD,G;;OAEDF,Y,GAAe,UAAAC,QAAQ,EAAI;AACzB,QAAIA,QAAQ,CAACE,MAAT,IAAmB,GAAnB,IAA0BF,QAAQ,CAACE,MAAT,GAAkB,GAAhD,EAAqD;AACnD,aAAOF,QAAP;AACD,KAFD,MAEO;AACL,UAAIG,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,QAAQ,CAACK,UAAnB,CAAZ;AACAF,MAAAA,KAAK,CAACH,QAAN,GAAiBA,QAAjB;AACA,YAAMG,KAAN;AACD;AACF,G;;;SAzEkBzC,iB","sourcesContent":["import decode from \"jwt-decode\";\n\nexport default class AuthHelperMethods {\n  \n  login = (grant_type,email, password) => {\n    return this.fetch(`https://blooming-cove-35281.herokuapp.com/api/oauth/token`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        grant_type,\n        email,\n        password\n      })\n    }).then(res => {\n      this.setToken(res.access_token); \n      return Promise.resolve(res);\n    });\n  };\n\n  loggedIn = () => {\n    const token = this.getToken(); \n    return !!token && !this.isTokenExpired(token);\n  };\n\n  isTokenExpired = token => {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      console.log(\"expired check failed!\");\n      return false;\n    }\n  };\n\n  setToken = idToken => {\n    localStorage.setItem(\"id_token\", idToken);\n  };\n\n  getToken = () => {\n    return localStorage.getItem(\"id_token\");\n  };\n\n\n  getConfirm = () => {\n    let answer = decode(this.getToken());\n    console.log(\"Token Decoded!\");\n    return answer;\n  };\n\n  fetch = (url, options) => {\n    const headers = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    };\n    if (this.loggedIn()) {\n      headers[\"Authorization\"] = \"Bearer \" + this.getToken();\n    }\n\n    return fetch(url, {\n      headers,\n      ...options\n    })\n      .then(this._checkStatus)\n      .then(response => response.json());\n  };\n\n  _checkStatus = response => {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    } else {\n      var error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}